FORMAT: 1A
HOST: http://keyrock
TITLE: Identity Manager GE - Keyrock Specification
DATE: 27 November 2015
VERSION: v3
PREVIOUS_VERSION: v2.0
APIARY_PROJECT: keyrock
SPEC_URL: http://ging.github.io/fiware-idm/keyrock.html
GITHUB_SOURCE: https://github.com/ging/fiware-idm

# Identity Manager GE - Keyrock

Identity Manager (IdM) GE API specifications comply with existing standards for authentication and user and provide access information. The following sections provide pointers to those standards and, when applicable, details about how the RESTful binding work. 

This specification is intended for Service Consumers (with developement skills) and Cloud Providers. For the former, this document provides a full specification of how to interoperate with the Identity Management Service API. For the latter, this specification indicates the interface to be provided to the client application developers to provide the described functionalities. To use this information, the reader should first have a general understanding of the [Generic Enabler service] (https://forge.fiware.org/plugins/mediawiki/wiki/fiware/index.php/FIWARE.ArchitectureDescription.Security.Identity_Management_Generic_Enabler).

The API user should be familiar with:

* RESTful web services
* HTTP/1.1
* JSON and/or XML data serialization formats.
* SCIM 2.0
* OAuth 2.0 

# Preface

## Editors

+ Álvaro Alonso González
+ Enrique García Navalón 

## Copyright

This specification is licensed under the
[FIWARE Open Specification License (implicit patent license)]
(http://forge.fiware.org/plugins/mediawiki/wiki/fiware/index.php/FI-WARE_Open_Specification_Legal_Notice_(implicit_patents_license)).

## Status

This is a work in progress and is changing on a daily basis.
Please send your comments to [FIWARE IdM Github Project](https://github.com/ging/fiware-idm/issues)

## Acknowledgements

The editors would like to express their gratitude to all the people that have contributed to this specification. 

#Group Keystone extensions

As Keyrock backend is based on Openstack Keystone, it fully implement its APIs. You can check them [here](http://developer.openstack.org/api-ref-identity-v3.html). Openstack also provides some [curl examples](http://docs.openstack.org/developer/keystone/api_curl_examples.html) in order to understand how the API works.

In order to manage other entities that only Keyrock offers, you have to use the extensions APIs, explained bellow. This APIs are exposed by the back-end NOT the front-end.

## Consumers [/OS-OAUTH2/consumers]

Consumers are the Applications registered in Keyrock to consume OAuth2 resources.

### List Consumers [GET]

+ Response 200 (application/json)

        {
          "links": {
            "self": "http://host/v3/OS-OAUTH2/consumers",
            "previous": null,
            "next": null
          },
          "consumers": [
            {
              "scopes": [
                "all_info"
              ],
              "redirect_uris": [
                "http://my_app/login"
              ],
              "img_small": "ApplicationAvatar/small/asdasdasdasdasdad",
              "name": "App test",
              "links": {
                "self": "http://host/v3/OS-OAUTH2/consumers/asdasdasdasdasdad"
              },
              "extra": {
                "url": "http://app.com",
                "img_original": "ApplicationAvatar/original/asdasdasdasdasdad",
                "img_small": "ApplicationAvatar/small/asdasdasdasdasdad",
                "img_medium": "ApplicationAvatar/medium/asdasdasdasdasdad"
              },
              "url": "http://app.com",
              "img_original": "ApplicationAvatar/original/asdasdasdasdasdad",
              "client_type": "confidential",
              "response_type": "code",
              "img_medium": "ApplicationAvatar/medium/asdasdasdasdasdad",
              "grant_type": "authorization_code",
              "id": "asdasdasdasdasdad",
              "description": "App test"
            }
          ]
        }

### Create a Consumer [POST]

+ Request (application/json)
        
        {
        "consumer": {
        "name": "test_consumer",
        "description": "my test consumer",
        "client_type": "confidential",
        "redirect_uris": ["http://localhost/login"],
        "grant_type": "authorization_code",
        "scopes": ["all_info"]
        } 
        }

+ Response 200 (application/json)

    + Body
            
            {
            "consumer": {
            "scopes": [
            "all_info"
            ],
            "redirect_uris": [
            "http://localhost/login"
            ],
            "description": "my test consumer",
            "links": {
            "self": "http://host/v3/OS-OAUTH2/consumers/308423904823490234923"
            },
            "extra": {},
            "secret": "3534535345345",
            "client_type": "confidential",
            "response_type": "code",
            "grant_type": "authorization_code",
            "id": "308423904823490234923",
            "name": "test_consumer"
            }
            }

## Consumer [/OS-OAUTH2/consumers/{consumer_id}]

+ Parameters
    + consumer_id - Id of the consumer.

### Read Consumer details [GET]

+ Response 200 (application/json)

        {
            "consumer": {
            "scopes": [
        "all_info"
        ],
        "redirect_uris": [
        "http://app.com/v1/login_fiware"
        ],
        "img_small": "ApplicationAvatar/small/dddjajdsajd23234232342",
        "name": "App test",
        "links": {
        "self": "http://host/v3/OS-OAUTH2/consumers/dddjajdsajd23234232342"
        },
        "extra": {
        "url": "http://app.com/v1",
        "img_original": "ApplicationAvatar/original/dddjajdsajd23234232342",
        "img_small": "ApplicationAvatar/small/dddjajdsajd23234232342",
        "img_medium": "ApplicationAvatar/medium/dddjajdsajd23234232342"
        },
        "url": "http://app.com/v1",
        "img_original": "ApplicationAvatar/original/dddjajdsajd23234232342",
        "description": "App test",
        "secret": "43534534535345345345345",
        "client_type": "confidential",
        "response_type": "code",
        "grant_type": "authorization_code",
        "id": "dddjajdsajd23234232342",
        "img_medium": "ApplicationAvatar/medium/dddjajdsajd23234232342"
        }
        }

### Update a Consumer [PATCH]

+ Request (application/json)

        {
        "consumer": {
        "field_to_update": "value",
        "antoher_field_to_update": ["another_value"]
        } 
        }

+ Response 200 (application/json)

### Delete a Consumer [DELETE]

+ Response 200 (application/json)

## Roles [/OS-ROLES/roles]


### List Roles [GET]

+ Response 200 (application/json)

        {
          "links": {
            "self": "http://host/v3/OS-ROLES/roles",
            "previous": null,
            "next": null
          },
          "roles": [
            {
              "is_internal": false,
              "application_id": "3123123131fg12f3g1f23g1jjjhg123h",
              "id": "312312384578231j312gff2h3782318",
              "links": {
                "self": "http://host/v3/OS-ROLES/roles/312312384578231j312gff2h3782318"
              },
              "name": "admin1"
            },
            {
              "is_internal": false,
              "application_id": "23123897182903712893712h3dh1031sd3",
              "id": "90834823948209f0sdf8jf'82kr820384",
              "links": {
                "self": "http://host/v3/OS-ROLES/roles/90834823948209f0sdf8jf82kr820384"
              },
              "name": "test"
            }
           ]
        }

### Create a Role [POST]

+ Request (application/json)

        {
        "role": {
        "name": "test_role",
        "application_id": "2222"
        } 
        }

+ Response 200 (application/json)

    + Body

            {
              "role": {
                "is_internal": false,
                "application_id": "2222",
                "id": "308423904823490234923",
                "links": {
                  "self": "http://host/v3/OS-ROLES/roles/308423904823490234923"
                },
                "name": "test_consumer"
              }
            }

## Rol [/OS-ROLES/roles/{role_id}]

+ Parameters
    + role_id - Id of the role.

### Read Role details [GET]

+ Response 200 (application/json)

        {
          "role": {
            "is_internal": false,
            "application_id": "3893298128973173d9173712d3",
            "id": "213412312jsd3jsj3812s3123",
            "links": {
              "self": "http://host/v3/OS-ROLES/roles/213412312jsd3jsj3812s3123"
            },
            "name": "physician"
          }
        }

### Update a Role [PATCH]

+ Request (application/json)

        {
        "role": {
        "name": "test_role_new",
        "application_id": "2222"
        } 
        }

+ Response 200 (application/json)

### Delete a Role [DELETE]

+ Response 200 (application/json)

## Permissions [/OS-ROLES/permissions]


### List Permissions [GET]

+ Response 200 (application/json)

        {
          "links": {
            "self": "http://host/v3/OS-ROLES/permissions",
            "previous": null,
            "next": null
          },
          "permissions": [
            {
              "xml": "",
              "resource": "radio",
              "name": "Access",
              "links": {
                "self": "http://host/v3/OS-ROLES/permissions/723893988932183717434rhejas"
              },
              "is_internal": false,
              "action": "GET",
              "application_id": "3423423424c234cx2342c",
              "id": "723893988932183717434rhejas"
            },
            {
              "xml": "",
              "resource": "/ui/resource1",
              "name": "identify resource1",
              "links": {
                "self": "http://host/v3/OS-ROLES/permissions/3987429348'3239234234"
              },
              "is_internal": false,
              "action": "POST",
              "application_id": "234234xc43242c",
              "id": "3987429348'3239234234"
            }
            ]
        }

### Create a Permission [POST]

+ Request (application/json)

        {
        "permission": {
        "name": "test_permission",
        "application_id": "2222"
        } 
        }

+ Response 200 (application/json)

    + Body
    
            {
              "permission": {
                "xml": null,
                "resource": null,
                "name": "test_consumer",
                "links": {
                  "self": "http://host/v3/OS-ROLES/permissions/1283798173489734892734983"
                },
                "is_internal": false,
                "action": null,
                "application_id": "2222",
                "id": "1283798173489734892734983"
              }
            }

## Permission [/OS-ROLES/permissions/{permission_id}]

+ Parameters
    + permission_id - Id of the permission.

### Read Permission details [GET]

+ Response 200 (application/json)

        {
          "permission": {
            "xml": "",
            "resource": "/enterprise/edit",
            "name": "Enterprise",
            "links": {
              "self": "http://host/v3/OS-ROLES/permissions/21897318273128937sh12a1"
            },
            "is_internal": false,
            "action": "GET",
            "application_id": "23129371237917f17fd07102d7",
            "id": "21897318273128937sh12a1"
          }
        }

### Update a Permission [PATCH]

+ Request (application/json)

        {
        "permission": {
        "name": "test_permission",
        "application_id": "2222"
        } 
        }

+ Response 200 (application/json)

### Delete a Permission [DELETE]

+ Response 200 (application/json)

## Role - Permission Relationships [/OS-ROLES/roles/{role_id}/permissions]

+ Parameters
    + role_id - Id of the role.

### List permissions associated to a role [GET]

+ Response 200 (application/json)

        {
          "links": {
            "self": "http://host/v3/OS-ROLES/permissions",
            "previous": null,
            "next": null
          },
          "permissions": [
            {
              "xml": null,
              "resource": "res2",
              "name": "getInfo",
              "links": {
                "self": "http://host/v3/OS-ROLES/permissions/23780128371283701238712307"
              },
              "is_internal": false,
              "action": "GET",
              "application_id": "asdasdasd12313213123",
              "id": "23780128371283701238712307"
            }
          ]
        }

## Role - Permission Relationship [/OS-ROLES/roles/{role_id}/permissions/{permission_id}]

+ Parameters
    + role_id - Id of the role.
    + permission_id - Id of the permission.

### Assign a permission to a role [PUT]

+ Response 200 (application/json)

### Remove a permission from a role [DELETE]

+ Response 200 (application/json)

## Role - User Relationships [/OS-ROLES/users/role_assignments]

### List users role assignments [GET]

+ Response 200 (application/json)

        {
         "role_assignments": [
            {
              "organization_id": "32163781263892173912312",
              "application_id": "12312301293-80181902380",
              "user_id": "30891239081038123",
              "role_id": "12331234"
            },
            {
              "organization_id": "00000000000000000000000000000frb",
              "application_id": "645765889gsdfadsasd",
              "user_id": "4341234213423234234",
              "role_id": "4324234"
            }
          ]
        }

## Role - User Relationship [/OS-ROLES/users/{user_id}/applications/{application_id}/roles/{role_id}]

+ Parameters
    + user_id - Id of the user.
    + application_id - Id of the application.
    + role_id - Id of the role.

### Assign a role to a user [PUT]

+ Response 200 (application/json)
        
### Remove a role assignment from a user [DELETE]

+ Response 200 (application/json)

## Role - User Relationship inside an organization [/OS-ROLES/users/{user_id}/organizations/{organization_id}/applications/{application_id}/roles/{role_id}]

+ Parameters
    + user_id - Id of the user
    + organization_id - Id of the organization.
    + application_id - Id of the application.
    + role_id - Id of the role.

### Assign a role to a user inside an organization [PUT]

+ Response 200 (application/json)
        
### Remove a role assignment from a user inside an organization [DELETE]

+ Response 200 (application/json)

## Role - Organization Relationships [/OS-ROLES/organizations/role_assignments]

### List organizations role assignments [GET]

+ Response 200 (application/json)

## Role - Organization Relationship [/OS-ROLES/organizations/{organization_id}/applications/{application_id}/roles/{role_id}]

+ Parameters
    + organization_id - Id of the organization.
    + application_id - Id of the application.
    + role_id - Id of the role.

### Assign a rol to an organization [PUT]

+ Response 200 (application/json)

### Remove a role assignment from an organization [DELETE]

+ Response 200 (application/json)

#Group SCIM 2.0

The IDM provides several authentication mechanisms. Any of them is valid to access the SCIM 2.0 API.

The access to the SCIM 2.0 API (except ServiceProvider calls) is only allowed for administrators, access attempts performed by non-admin users will be answered with HTTP 401 (Unauthorized).

In this case, we will be using version 2.0 of the API, but version 1.1 is compatible. To use version 1.1, replace in the examples below v2 with v1. In the case of the organizations, only v2 is available.

# Users [/v2/Users/]

### List Users [GET]

+ Response 200 (application/json)

        {"totalResults": 12, "Resources": [...], "schemas": ["urn:scim:schemas:core:2.0", "urn:scim:schemas:extension:keystone:2.0"]}

### Create a User [POST]

+ Request (application/json)

        { 
         "userName": "alice",
         "displayName": "Alice"
         "password": "passw0rd",
         "emails": [
             {
               "value": "alice@mailhost.com"
              }
         ]
        }

+ Response 200 (application/json)

## User [/v3/OS-SCIM/v2/Users/{user_id}]

+ Parameters
    + user_id - Id of the user.

### Read info about a User [GET]

+ Response 200 (application/json)

        {"userName": "user1@user.com", "urn:scim:schemas:extension:keystone:2.0": {"domain_id": "default"}, "active": true, "id": "user1", "schemas": ["urn:scim:schemas:core:2.0", "urn:scim:schemas:extension:keystone:2.0"]}

### Update a User [PUT]

+ Request (application/json)

        { 
         "userName": "alice",
         "displayName": "Alice"
         "password": "passw0rd_new",
         "emails": [
             {
               "value": "alice@mailhost.com"
              }
         ]
        }

+ Response 200 (application/json)

### Delete a User [DELETE]

+ Response 200 (application/json)

# Organizations [/v2/Organizations/]

### List Organizations [GET]

+ Response 200 (application/json)

        {"totalResults": 24, "Resources": [...], "schemas": ["urn:scim:schemas:core:2.0", "urn:scim:schemas:extension:keystone:2.0"]}

### Create an Organization [POST]

+ Request (application/json)

        {
            "name": "Name of organization", 
            "is_default": true,
            "domain_id": "domain",
            "active": true, 
            "id": "ID", 
        }

+ Response 200 (application/json)

## Organization [/v3/OS-SCIM/v2/Organizations/{organization_id}]

+ Parameters
    + organization_id - Id of the organization.

### Read info about an Organization [GET]

+ Response 200 (application/json)

        {"name": "org1", "is_default": true, "urn:scim:schemas:extension:keystone:2.0": {"domain_id": "default"}, "active": true, "id": "22928e07c0bd4063a7f0bb8c826b0a18", "schemas": ["urn:scim:schemas:core:2.0", "urn:scim:schemas:extension:keystone:2.0"]}

### Update an Organization [PUT]

+ Request (application/json)

        {
            "name": "New name of organization", 
            "is_default": true,
            "domain_id": "domain",
            "active": true, 
            "id": "ID", 
        }

+ Response 200 (application/json)

### Delete an Organization [DELETE]

+ Response 200 (application/json)

## Service Provider [/v3/OS-SCIM/v2/ServiceProviderConfigs]

### Read Service Provider Configuration [GET]

"Information" provides the number of total users, total organizations (not counting the default organizations), cloud organizations, and the number of each type of user (basic, trial and community).

+ Response 200 (application/json)

        {
        "sort": {
            "supported": false
        }, 
        "bulk": {
            "maxPayloadSize": 0, 
            "supported": false, 
            "maxOperations": 0
        }, 
        "changePassword": {
            "supported": true
        }, "xmlDataFormat": {
            "supported": false
        }, 
        "information": {
            "basicUsers": 1, 
            "totalCloudOrganizations": 12, 
            "totalUserOrganizations": 24, 
            "communityUsers": 0, 
            "totalUsers": 12, 
            "trialUsers": 0, 
            "totalResources": 48
        }, 
        "documentationUrl": "https://github.com/ging/fi-ware-idm/wiki/SCIM-2.0-API", 
        "patch": {
            "supported": true
        }, 
        "filter": {
            "supported": true, 
            "maxResults": 9223372036854775807
        }, 
        "etag": {
            "supported": false
        }, 
        "schemas": ["urn:scim:schemas:core:2.0:ServiceProviderConfig"], 
        "authenticationSchemes": [{
            "name": "Keytone Authentication", 
            "documentationUrl": "http://keystone.openstack.org/", 
            "primary": true, 
            "specUrl": "http://specs.openstack.org/openstack/keystone-specs", 
            "type": "keystonetoken", 
            "description": "Authentication using Keystone"
        }]}
